// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  
  // Additional user profile fields
  bio           String?
  location      String?
  website       String?
  role          String    @default("user")

  // Wallet related fields
  wallet        Wallet?
  transactions  Transaction[]
}

model Wallet {
  id            String       @id @default(cuid())
  balance       Float        @default(0)
  currency      String       @default("USD")
  userId        String       @unique
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  transactions  Transaction[]
}

model Transaction {
  id            String    @id @default(cuid())
  amount        Float
  currency      String    @default("USD")
  type          String    // "DEPOSIT", "WITHDRAWAL", "TRANSFER"
  status        String    @default("PENDING") // "PENDING", "COMPLETED", "FAILED"
  description   String?
  metadata      Json?     // Additional transaction metadata
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  walletId      String
  wallet        Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([walletId])
}

model Account {
  id                String   @id @default(cuid())
  userId           String
  type             String   // "oauth", "credentials"
  provider         String   // "discord", "telegram", "twitter", "facebook", etc.
  providerAccountId String
  refresh_token    String?  @db.Text
  access_token     String?  @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String?  @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
