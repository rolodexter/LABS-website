generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  contentItems  ContentItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  bio           String?
  location      String?
  website       String?
  role          String        @default("user")
  wallet        Wallet?       @relation("UserPrimaryWallet")
}

model Wallet {
  id           String        @id @default(cuid())
  balance      Float         @default(0)
  currency     String        @default("USD")
  userId       String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  user         User          @relation("UserPrimaryWallet", fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  currency    String   @default("USD")
  type        String
  status      String   @default("PENDING")
  description String?
  metadata    Json?
  userId      String
  walletId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([walletId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Content Models

model ContentItem {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  type          String   // "article", "knowledge", "project", etc.
  content       String   @db.Text
  excerpt       String?  @db.Text
  published     Boolean  @default(true)
  featured      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  publishedAt   DateTime?
  authorId      String?
  tags          Tag[]    @relation("ContentToTags")
  categories    Category[] @relation("ContentToCategories")
  metadata      Json?    // For storing additional structured data
  author        User?    @relation(fields: [authorId], references: [id])
  
  @@index([type])
  @@index([publishedAt])
  @@index([featured])
  @@index([authorId])
}

model Tag {
  id          String        @id @default(cuid())
  name        String        @unique
  slug        String        @unique
  description String?
  contentItems ContentItem[] @relation("ContentToTags")
}

model Category {
  id          String        @id @default(cuid())
  name        String        @unique
  slug        String        @unique
  description String?
  parentId    String?
  parent      Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]    @relation("CategoryHierarchy")
  contentItems ContentItem[] @relation("ContentToCategories")
  
  @@index([parentId])
}
